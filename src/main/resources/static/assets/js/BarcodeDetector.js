(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("BarcodeDetector", [], factory);
	else if(typeof exports === 'object')
		exports["BarcodeDetector"] = factory();
	else
		root["BarcodeDetector"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = function() {
	return __webpack_require__(2)("/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/* eslint-disable */\n\n/* --------------------------------------------------\nJavascript Only Barcode_Reader (BarcodeReader) V1.6 by Eddie Larsson <https://github.com/EddieLa/BarcodeReader>\n\nThis software is provided under the MIT license, http://opensource.org/licenses/MIT.\nAll use of this software must include this\ntext, including the reference to the creator of the original source code. The\noriginator accepts no responsibility of any kind pertaining to\nuse of this software.\n\nCopyright (c) 2013 Eddie Larsson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n------------------------ */\n\nvar availableFormats = [\"Code128\", \"Code93\", \"Code39\", \"EAN-13\", \"2Of5\", \"Inter2Of5\", \"Codabar\"];\nvar SecureCodabar = true;\nvar Secure2Of5 = true;\nvar Image = void 0,\n    ScanImage = void 0,\n    allTables = void 0,\n    FormatPriority = void 0,\n    Multiple = void 0,\n    Locations = void 0;\n\nfunction Rotate(data, width, height, rotation) {\n  var newData = [];\n  var x, y;\n  switch (rotation) {\n    case 90:\n      for (x = 0; x < width * 4; x += 4) {\n        for (y = width * 4 * (height - 1); y >= 0; y -= width * 4) {\n          newData.push(data[x + y]);\n          newData.push(data[x + y + 1]);\n          newData.push(data[x + y + 2]);\n          newData.push(data[x + y + 3]);\n        }\n      }\n      break;\n    case -90:\n      for (x = width * 4 - 4; x >= 0; x -= 4) {\n        for (y = 0; y < data.length; y += width * 4) {\n          newData.push(data[x + y]);\n          newData.push(data[x + y + 1]);\n          newData.push(data[x + y + 2]);\n          newData.push(data[x + y + 3]);\n        }\n      }\n      break;\n    case 180:\n      for (y = width * 4 * (height - 1); y >= 0; y -= width * 4) {\n        for (x = width * 4 - 4; x >= 0; x -= 4) {\n          newData.push(data[x + y]);\n          newData.push(data[x + y + 1]);\n          newData.push(data[x + y + 2]);\n          newData.push(data[x + y + 3]);\n        }\n      }\n  }\n  return new Uint8ClampedArray(newData);\n}\n\nfunction BoxFilter(data, width, radius) {\n  var elements = [];\n  var sum = [];\n  var val;\n  var x, y, i;\n  for (x = 0; x < width; x++) {\n    elements.push([]);\n    sum.push(0);\n    for (y = 0; y < (radius + 1) * width; y += width) {\n      elements[elements.length - 1].push(data[x + y]);\n      sum[sum.length - 1] = sum[sum.length - 1] + data[x + y];\n    }\n  }\n  var newData = [];\n  for (y = 0; y < data.length; y += width) {\n    for (x = 0; x < width; x++) {\n      var newVal = 0;\n      var length = 0;\n      for (i = x; i >= 0; i--) {\n        newVal += sum[i];\n        length++;\n        if (length === radius + 1) break;\n      }\n      var tempLength = 0;\n      for (i = x + 1; i < width; i++) {\n        newVal += sum[i];\n        length++;\n        tempLength++;\n        if (tempLength === radius) break;\n      }\n      length *= elements[0].length;\n      newVal /= length;\n      newData.push(newVal);\n    }\n    if (y - radius * width >= 0) {\n      for (i = 0; i < elements.length; i++) {\n        val = elements[i].shift();\n        sum[i] = sum[i] - val;\n      }\n    }\n    if (y + (radius + 1) * width < data.length) {\n      for (i = 0; i < elements.length; i++) {\n        val = data[i + y + (radius + 1) * width];\n        elements[i].push(val);\n        sum[i] = sum[i] + val;\n      }\n    }\n  }\n  return newData;\n}\n\nfunction Scale(data, width, height) {\n  var newData = [];\n  var x, y;\n  for (y = 0; y < data.length; y += width * 8) {\n    for (x = 0; x < width * 4; x += 8) {\n      var r = (data[y + x] + data[y + x + 4] + data[y + width * 4 + x] + data[y + width * 4 + x + 4]) / 4;\n      newData.push(r);\n      var g = (data[y + x + 1] + data[y + x + 4 + 1] + data[y + width * 4 + x + 1] + data[y + width * 4 + x + 4 + 1]) / 4;\n      newData.push(g);\n      var b = (data[y + x + 2] + data[y + x + 4 + 2] + data[y + width * 4 + x + 2] + data[y + width * 4 + x + 4 + 2]) / 4;\n      newData.push(b);\n      newData.push(255);\n    }\n  }\n  return new Uint8ClampedArray(newData);\n}\n\nfunction IntensityGradient(data, width) {\n  var newData = [];\n  var max = Number.MIN_VALUE;\n  var min = Number.MAX_VALUE;\n  var x, y, i;\n  for (y = 0; y < data.length; y += width * 4) {\n    for (x = 0; x < width * 4; x += 4) {\n      var horizontalDiff = 0;\n      var verticalDiff = 0;\n      for (i = 1; i < 2; i++) {\n        if (x + i * 4 < width * 4) {\n          horizontalDiff = horizontalDiff + Math.abs(data[y + x] - data[y + x + i * 4]);\n        }\n        if (y + width * 4 * i < data.length) {\n          verticalDiff += verticalDiff + Math.abs(data[y + x] - data[y + x + width * 4 * i]);\n        }\n      }\n      var diff = horizontalDiff - verticalDiff;\n      max = diff > max ? diff : max;\n      min = diff < min ? diff : min;\n      newData.push(diff);\n    }\n  }\n  if (min < 0) {\n    for (i = 0; i < newData.length; i++) {\n      newData[i] = newData[i] - min;\n    }\n    min = 0;\n  }\n  return newData;\n}\n\nfunction greyScale(data) {\n  var i;\n  for (i = 0; i < data.length; i += 4) {\n    var max = 0;\n    var min = 255;\n    max = data[i] > max ? data[i] : max;\n    max = data[i + 1] > max ? data[i + 1] : max;\n    max = data[i + 2] > max ? data[i + 2] : max;\n    min = data[i] < min ? data[i] : min;\n    min = data[i + 1] < min ? data[i + 1] : min;\n    min = data[i + 2] < min ? data[i + 2] : min;\n    data[i] = data[i + 1] = data[i + 2] = (max + min) / 2;\n  }\n}\n\nfunction histogram(data) {\n  var i;\n  var hist = [];\n  for (i = 0; i < 256; i++) {\n    hist[i] = 0;\n  }\n  for (i = 0; i < data.length; i += 4) {\n    hist[data[i]] = hist[data[i]] + 1;\n  }\n  return hist;\n}\n\nfunction otsu(histogram, total) {\n  var i;\n  var sum = 0;\n  for (i = 1; i < histogram.length; ++i) {\n    sum += i * histogram[i];\n  }var sumB = 0;\n  var wB = 0;\n  var wF = 0;\n  var mB;\n  var mF;\n  var max = 0.0;\n  var between = 0.0;\n  var threshold1 = 0.0;\n  var threshold2 = 0.0;\n  for (i = 0; i < histogram.length; ++i) {\n    wB += histogram[i];\n    if (wB === 0) continue;\n    wF = total - wB;\n    if (wF === 0) break;\n    sumB += i * histogram[i];\n    mB = sumB / wB;\n    mF = (sum - sumB) / wF;\n    between = wB * wF * Math.pow(mB - mF, 2);\n    if (between >= max) {\n      threshold1 = i;\n      if (between > max) {\n        threshold2 = i;\n      }\n      max = between;\n    }\n  }\n  return (threshold1 + threshold2) / 2.0;\n}\n\nfunction CreateImageData() {\n  Image.data = new Uint8ClampedArray(Image.width * Image.height * 4);\n  var Converter;\n  var x, y;\n  for (y = 0; y < Image.height; y++) {\n    for (x = 0; x < Image.width; x++) {\n      Converter = y * 4 * Image.width;\n      Image.data[Converter + x * 4] = Image.table[x][y][0];\n      Image.data[Converter + x * 4 + 1] = Image.table[x][y][1];\n      Image.data[Converter + x * 4 + 2] = Image.table[x][y][2];\n      Image.data[Converter + x * 4 + 3] = Image.table[x][y][3];\n    }\n  }\n}\n\nfunction CreateScanImageData() {\n  ScanImage.data = new Uint8ClampedArray(ScanImage.width * ScanImage.height * 4);\n  var Converter;\n  var x, y;\n  for (y = 0; y < ScanImage.height; y++) {\n    for (x = 0; x < ScanImage.width; x++) {\n      Converter = y * 4 * ScanImage.width;\n      ScanImage.data[Converter + x * 4] = ScanImage.table[x][y][0];\n      ScanImage.data[Converter + x * 4 + 1] = ScanImage.table[x][y][1];\n      ScanImage.data[Converter + x * 4 + 2] = ScanImage.table[x][y][2];\n      ScanImage.data[Converter + x * 4 + 3] = ScanImage.table[x][y][3];\n    }\n  }\n}\n\nfunction CreateTable() {\n  Image.table = [];\n  var tempArray = [];\n  var i, j;\n  for (i = 0; i < Image.width * 4; i += 4) {\n    tempArray = [];\n    for (j = i; j < Image.data.length; j += Image.width * 4) {\n      tempArray.push([Image.data[j], Image.data[j + 1], Image.data[j + 2], Image.data[j + 3]]);\n    }\n    Image.table.push(tempArray);\n  }\n}\n\nfunction CreateScanTable() {\n  ScanImage.table = [];\n  var tempArray = [];\n  var i, j;\n  for (i = 0; i < ScanImage.width * 4; i += 4) {\n    tempArray = [];\n    for (j = i; j < ScanImage.data.length; j += ScanImage.width * 4) {\n      tempArray.push([ScanImage.data[j], ScanImage.data[j + 1], ScanImage.data[j + 2], ScanImage.data[j + 3]]);\n    }\n    ScanImage.table.push(tempArray);\n  }\n}\n\nfunction EnlargeTable(h, w) {\n  var TempArray = [];\n  var x, y, i;\n  for (x = 0; x < Image.width; x++) {\n    TempArray = [];\n    for (y = 0; y < Image.height; y++) {\n      for (i = 0; i < h; i++) {\n        TempArray.push(Image.table[x][y]);\n      }\n    }\n    Image.table[x] = TempArray.slice();\n  }\n  TempArray = Image.table.slice();\n  for (x = 0; x < Image.width; x++) {\n    for (i = 0; i < w; i++) {\n      Image.table[x * w + i] = TempArray[x].slice();\n    }\n  }\n  Image.width = Image.table.length;\n  Image.height = Image.table[0].length;\n  CreateImageData();\n}\n\nfunction ScaleHeight(scale) {\n  var tempArray = [];\n  var avrgRed = 0;\n  var avrgGreen = 0;\n  var avrgBlue = 0;\n  var i, j, k;\n  for (i = 0; i < Image.height - scale; i += scale) {\n    for (j = 0; j < Image.width; j++) {\n      avrgRed = 0;\n      avrgGreen = 0;\n      avrgBlue = 0;\n      for (k = i; k < i + scale; k++) {\n        avrgRed += Image.table[j][k][0];\n        avrgGreen += Image.table[j][k][1];\n        avrgBlue += Image.table[j][k][2];\n      }\n      tempArray.push(avrgRed / scale);\n      tempArray.push(avrgGreen / scale);\n      tempArray.push(avrgBlue / scale);\n      tempArray.push(255);\n    }\n  }\n  return new Uint8ClampedArray(tempArray);\n}\n\nfunction Intersects(rectOne, rectTwo) {\n  return rectOne[0][0] <= rectTwo[0][1] && rectTwo[0][0] <= rectOne[0][1] && rectOne[1][0] <= rectTwo[1][1] && rectTwo[1][0] <= rectOne[1][1];\n}\n\nfunction maxLocalization(max, maxPos, data) {\n  var originalMax = max;\n  var rects = [];\n  var x, y, i;\n  do {\n    var startX = maxPos % Image.width;\n    var startY = (maxPos - startX) / Image.width;\n    var minY = 0;\n    var maxY = Image.height;\n    var minX = 0;\n    var maxX = Image.width - 1;\n    for (y = startY; y < Image.height - 1; y++) {\n      if (Image.table[startX][y + 1][0] === 0) {\n        maxY = y;\n        break;\n      }\n    }\n    for (y = startY; y > 0; y--) {\n      if (Image.table[startX][y - 1][0] === 0) {\n        minY = y;\n        break;\n      }\n    }\n    for (x = startX; x < Image.width - 1; x++) {\n      if (Image.table[x + 1][startY][0] === 0) {\n        maxX = x;\n        break;\n      }\n    }\n    for (x = startX; x > 0; x--) {\n      if (Image.table[x - 1][startY][0] === 0) {\n        minX = x;\n        break;\n      }\n    }\n    for (y = minY * Image.width; y <= maxY * Image.width; y += Image.width) {\n      for (x = minX; x <= maxX; x++) {\n        data[y + x] = 0;\n      }\n    }\n    var newRect = [[minX, maxX], [minY, maxY]];\n    for (i = 0; i < rects.length; i++) {\n      if (Intersects(newRect, rects[i])) {\n        if (rects[i][0][1] - rects[i][0][0] > newRect[0][1] - newRect[0][0]) {\n          rects[i][0][0] = rects[i][0][0] < newRect[0][0] ? rects[i][0][0] : newRect[0][0];\n          rects[i][0][1] = rects[i][0][1] > newRect[0][1] ? rects[i][0][1] : newRect[0][1];\n          newRect = [];\n          break;\n        } else {\n          rects[i][0][0] = rects[i][0][0] < newRect[0][0] ? rects[i][0][0] : newRect[0][0];\n          rects[i][0][1] = rects[i][0][1] > newRect[0][1] ? rects[i][0][1] : newRect[0][1];\n          rects[i][1][0] = newRect[1][0];\n          rects[i][1][1] = newRect[1][1];\n          newRect = [];\n          break;\n        }\n      }\n    }\n    if (newRect.length > 0) {\n      rects.push(newRect);\n    }\n    max = 0;\n    maxPos = 0;\n    var newMaxPos = 0;\n    for (i = 0; i < data.length; i++) {\n      if (data[i] > max) {\n        max = data[i];\n        maxPos = i;\n      }\n    }\n  } while (max > originalMax * 0.70);\n  return rects;\n}\n\nfunction ImgProcessing() {\n  greyScale(Image.data);\n  var newData = IntensityGradient(Image.data, Image.width);\n  newData = BoxFilter(newData, Image.width, 15);\n  var min = newData[0];\n  var i, x, y;\n  for (i = 1; i < newData.length; i++) {\n    min = min > newData[i] ? newData[i] : min;\n  }\n  var max = 0;\n  var maxPos = 0;\n  var avrgLight = 0;\n  for (i = 0; i < newData.length; i++) {\n    newData[i] = Math.round(newData[i] - min);\n    avrgLight += newData[i];\n    if (max < newData[i]) {\n      max = newData[i];\n      maxPos = i;\n    }\n  }\n  avrgLight /= newData.length;\n  if (avrgLight < 15) {\n    newData = BoxFilter(newData, Image.width, 8);\n    min = newData[0];\n    for (i = 1; i < newData.length; i++) {\n      min = min > newData[i] ? newData[i] : min;\n    }\n    max = 0;\n    maxPos = 0;\n    for (i = 0; i < newData.length; i++) {\n      newData[i] = Math.round(newData[i] - min);\n      if (max < newData[i]) {\n        max = newData[i];\n        maxPos = i;\n      }\n    }\n  }\n  var hist = [];\n  for (i = 0; i <= max; i++) {\n    hist[i] = 0;\n  }\n  for (i = 0; i < newData.length; i++) {\n    hist[newData[i]] = hist[newData[i]] + 1;\n  }\n  var thresh = otsu(hist, newData.length);\n  for (i = 0; i < newData.length; i++) {\n    if (newData[i] < thresh) {\n      Image.data[i * 4] = Image.data[i * 4 + 1] = Image.data[i * 4 + 2] = 0;\n    } else {\n      Image.data[i * 4] = Image.data[i * 4 + 1] = Image.data[i * 4 + 2] = 255;\n    }\n  }\n  CreateTable();\n  var rects = maxLocalization(max, maxPos, newData);\n  var feedBack = [];\n  for (i = 0; i < rects.length; i++) {\n    feedBack.push({\n      x: rects[i][0][0],\n      y: rects[i][1][0],\n      width: rects[i][0][1] - rects[i][0][0],\n      height: rects[i][1][1] - rects[i][1][0]\n    });\n  }\n  if (feedBack.length > 0) postMessage({\n    result: feedBack,\n    success: \"localization\"\n  });\n  Locations = feedBack;\n  allTables = [];\n  for (i = 0; i < rects.length; i++) {\n    var newTable = [];\n    for (x = rects[i][0][0] * 2; x < rects[i][0][1] * 2; x++) {\n      var tempArray = [];\n      for (y = rects[i][1][0] * 2; y < rects[i][1][1] * 2; y++) {\n        tempArray.push([ScanImage.table[x][y][0], ScanImage.table[x][y][1], ScanImage.table[x][y][2], 255]);\n      }\n      newTable.push(tempArray);\n    }\n    if (newTable.length < 1) continue;\n    Image.table = newTable;\n    Image.width = newTable.length;\n    Image.height = newTable[0].length;\n    CreateImageData();\n    allTables.push({\n      table: newTable,\n      data: new Uint8ClampedArray(Image.data),\n      width: Image.width,\n      height: Image.height\n    });\n  }\n}\n\nfunction showImage(data, width, height) {\n  postMessage({\n    result: data,\n    width: width,\n    height: height,\n    success: \"image\"\n  });\n}\n\nfunction Main() {\n  ImgProcessing();\n  var allResults = [];\n  var tempObj;\n  var tempData;\n  var hist;\n  var val;\n  var thresh;\n  var start;\n  var end;\n  var z, i;\n  for (z = 0; z < allTables.length; z++) {\n    Image = allTables[z];\n    var scaled = ScaleHeight(30);\n    var variationData;\n    var incrmt = 0;\n    var format = \"\";\n    var first = true;\n    var eanStatistics = {};\n    var eanOrder = [];\n    var Selection = false;\n    do {\n      tempData = scaled.subarray(incrmt, incrmt + Image.width * 4);\n      hist = [];\n      for (i = 0; i < 256; i++) {\n        hist[i] = 0;\n      }\n      for (i = 0; i < tempData.length; i += 4) {\n        val = Math.round((tempData[i] + tempData[i + 1] + tempData[i + 2]) / 3);\n        hist[val] = hist[val] + 1;\n      }\n      thresh = otsu(hist, tempData.length / 4);\n      start = thresh < 41 ? 1 : thresh - 40;\n      end = thresh > 254 - 40 ? 254 : thresh + 40;\n      variationData = yStraighten(tempData, start, end);\n      Selection = BinaryString(variationData);\n      if (Selection.string) {\n        format = Selection.format;\n        tempObj = Selection;\n        Selection = Selection.string;\n        if (format === \"EAN-13\") {\n          if (typeof eanStatistics[Selection] === 'undefined') {\n            eanStatistics[Selection] = {\n              count: 1,\n              correction: tempObj.correction\n            };\n            eanOrder.push(Selection);\n          } else {\n            eanStatistics[Selection].count = eanStatistics[Selection].count + 1;\n            eanStatistics[Selection].correction = eanStatistics[Selection].correction + tempObj.correction;\n          }\n          Selection = false;\n        }\n      } else {\n        Selection = false;\n      }\n      incrmt += Image.width * 4;\n    } while (!Selection && incrmt < scaled.length);\n    if (Selection && format !== \"EAN-13\") allResults.push({\n      Format: format,\n      Value: Selection\n    });\n    if (format === \"EAN-13\") Selection = false;\n    if (!Selection) {\n      EnlargeTable(4, 2);\n      incrmt = 0;\n      scaled = ScaleHeight(20);\n      do {\n        tempData = scaled.subarray(incrmt, incrmt + Image.width * 4);\n        hist = [];\n        for (i = 0; i < 256; i++) {\n          hist[i] = 0;\n        }\n        for (i = 0; i < tempData.length; i += 4) {\n          val = Math.round((tempData[i] + tempData[i + 1] + tempData[i + 2]) / 3);\n          hist[val] = hist[val] + 1;\n        }\n        thresh = otsu(hist, tempData.length / 4);\n        start = thresh < 40 ? 0 : thresh - 40;\n        end = thresh > 255 - 40 ? 255 : thresh + 40;\n        variationData = yStraighten(tempData, start, end);\n        Selection = BinaryString(variationData);\n        if (Selection.string) {\n          format = Selection.format;\n          tempObj = Selection;\n          Selection = Selection.string;\n          if (format === \"EAN-13\") {\n            if (typeof eanStatistics[Selection] === 'undefined') {\n              eanStatistics[Selection] = {\n                count: 1,\n                correction: tempObj.correction\n              };\n              eanOrder.push(Selection);\n            } else {\n              eanStatistics[Selection].count = eanStatistics[Selection].count + 1;\n              eanStatistics[Selection].correction = eanStatistics[Selection].correction + tempObj.correction;\n            }\n            Selection = false;\n          }\n        } else {\n          Selection = false;\n        }\n        incrmt += Image.width * 4;\n      } while (!Selection && incrmt < scaled.length);\n      if (format === \"EAN-13\") {\n        var points = {};\n        for (var key in eanStatistics) {\n          eanStatistics[key].correction = eanStatistics[key].correction / eanStatistics[key].count;\n          var pointTemp = eanStatistics[key].correction;\n          pointTemp -= eanStatistics[key].count;\n          pointTemp += eanOrder.indexOf(key);\n          points[key] = pointTemp;\n        }\n        var minPoints = Number.POSITIVE_INFINITY;\n        var tempString = \"\";\n        for (var point in points) {\n          if (points[point] < minPoints) {\n            minPoints = points[point];\n            tempString = key;\n          }\n        }\n        if (minPoints < 11) {\n          Selection = tempString;\n        } else {\n          Selection = false;\n        }\n      }\n      if (Selection) allResults.push({\n        Format: format,\n        Value: Selection,\n        bBox: Locations[z]\n      });\n    }\n    if (allResults.length > 0 && !Multiple) break;\n  }\n  return allResults;\n}\n\nfunction yStraighten(img, start, end) {\n  var average = 0;\n  var threshold;\n  var newImg = new Uint8ClampedArray(Image.width * (end - start + 1) * 4);\n  var i, j;\n  for (i = 0; i < newImg.length; i++) {\n    newImg[i] = 255;\n  }\n  for (i = 0; i < Image.width * 4; i += 4) {\n    threshold = end;\n    average = (img[i] + img[i + 1] + img[i + 2]) / 3;\n    if (i < Image.width * 4 - 4) {\n      average += (img[i + 4] + img[i + 5] + img[i + 6]) / 3;\n      average /= 2;\n    }\n    for (j = i; j < newImg.length; j += Image.width * 4) {\n      if (average < threshold) {\n        newImg[j] = newImg[j + 1] = newImg[j + 2] = 0;\n      }\n      threshold--;\n    }\n  }\n  return newImg;\n}\n\nfunction CheckEan13(values, middle) {\n  if (middle) {\n    if (values.length !== 5) return false;\n  } else {\n    if (values.length !== 3) return false;\n  }\n  var avrg = 0;\n  var i;\n  for (i = 0; i < values.length; i++) {\n    avrg += values[i];\n  }\n  avrg /= values.length;\n  for (i = 0; i < values.length; i++) {\n    if (values[i] / avrg < 0.5 || values[i] / avrg > 1.5) return false;\n  }\n  return true;\n}\n\nfunction TwoOfFiveStartEnd(values, start) {\n  if (values.length < 5 || values.length > 6) return false;\n  var maximum = 0;\n  var TwoOfFiveMax = [0, 0];\n  var u;\n  for (u = 0; u < values.length; u++) {\n    if (values[u] > maximum) {\n      maximum = values[u];\n      TwoOfFiveMax[0] = u;\n    }\n  }\n  maximum = 0;\n  for (u = 0; u < values.length; u++) {\n    if (u === TwoOfFiveMax[0]) continue;\n    if (values[u] > maximum) {\n      maximum = values[u];\n      TwoOfFiveMax[1] = u;\n    }\n  }\n  if (start) {\n    return TwoOfFiveMax[0] + TwoOfFiveMax[1] === 2;\n  } else {\n    return TwoOfFiveMax[0] + TwoOfFiveMax[1] === 2;\n  }\n}\n\nfunction CheckInterleaved(values, start) {\n  var average = 0;\n  var i;\n  for (i = 0; i < values.length; i++) {\n    average += values[i];\n  }\n  average /= 4;\n  if (start) {\n    if (values.length !== 4) return false;\n    for (i = 0; i < values.length; i++) {\n      if (values[i] / average < 0.5 || values[i] / average > 1.5) return false;\n    }\n    return true;\n  } else {\n    if (values.length !== 3) return false;\n    var max = 0;\n    var pos;\n    for (i = 0; i < values.length; i++) {\n      if (values[i] > max) {\n        max = values[i];\n        pos = i;\n      }\n    }\n    if (pos !== 0) return false;\n    if (values[0] / average < 1.5 || values[0] / average > 2.5) return false;\n    for (i = 1; i < values.length; i++) {\n      if (values[i] / average < 0.5 || values[i] / average > 1.5) return false;\n    }\n    return true;\n  }\n}\n\nfunction BinaryConfiguration(binaryString, type) {\n  var result = [];\n  var binTemp = [];\n  var count = 0;\n  var bars;\n  var len;\n  var totalBars;\n  var i;\n  if (type === \"Code128\" || type === \"Code93\") {\n    totalBars = 6;\n    len = binaryString[0];\n    if (type === \"Code128\") len /= 2;\n    for (i = 0; i < binaryString.length; i++) {\n      if (binaryString[i] > len * 6) {\n        binaryString.splice(i, binaryString.length);\n        break;\n      }\n    }\n    do {\n      if (binaryString.length === 7 && type === \"Code128\") {\n        result.push(binaryString.splice(0, binaryString.length));\n      } else {\n        result.push(binaryString.splice(0, totalBars));\n      }\n      if (type === \"Code93\" && binaryString.length < 6) binaryString.splice(0, totalBars);\n    } while (binaryString.length > 0);\n  }\n  if (type === \"Code39\") {\n    totalBars = 9;\n    len = binaryString[0];\n    for (i = 0; i < binaryString.length; i++) {\n      if (binaryString[i] > len * 5) {\n        binaryString.splice(i, binaryString.length);\n        break;\n      }\n    }\n    do {\n      result.push(binaryString.splice(0, totalBars));\n      binaryString.splice(0, 1);\n    } while (binaryString.length > 0);\n  }\n  if (type === \"EAN-13\") {\n    totalBars = 4;\n    len = binaryString[0];\n    var secureCount = 0;\n    for (i = 0; i < binaryString.length; i++) {\n      if (binaryString[i] > len * 6) {\n        binaryString.splice(i, binaryString.length);\n        break;\n      }\n    }\n    if (CheckEan13(binaryString.splice(0, 3), false)) secureCount++;\n    count = 0;\n    do {\n      result.push(binaryString.splice(0, totalBars));\n      count++;\n      if (count === 6) if (CheckEan13(binaryString.splice(0, 5), true)) secureCount++;\n    } while (result.length < 12 && binaryString.length > 0);\n    if (CheckEan13(binaryString.splice(0, 3), false)) secureCount++;\n    if (secureCount < 2) return [];\n  }\n  if (type === \"2Of5\") {\n    totalBars = 5;\n    len = binaryString[0] / 2;\n    for (i = 0; i < binaryString.length; i++) {\n      if (binaryString[i] > len * 5) {\n        binaryString.splice(i, binaryString.length);\n        break;\n      }\n    }\n    var temp = binaryString.splice(0, 6);\n    result.push(temp);\n    do {\n      binTemp = [];\n      for (i = 0; i < totalBars; i++) {\n        binTemp.push(binaryString.splice(0, 1)[0]);\n        // binaryString.splice(0, 1)[0];\n      }\n      result.push(binTemp);\n      if (binaryString.length === 5) result.push(binaryString.splice(0, 5));\n    } while (binaryString.length > 0);\n  }\n  if (type === \"Inter2Of5\") {\n    totalBars = 5;\n    len = binaryString[0];\n    for (i = 0; i < binaryString.length; i++) {\n      if (binaryString[i] > len * 5) {\n        binaryString.splice(i, binaryString.length);\n        break;\n      }\n    }\n    result.push(binaryString.splice(0, 4));\n    var binTempWhite = [];\n    do {\n      binTemp = [];\n      binTempWhite = [];\n      for (i = 0; i < totalBars; i++) {\n        binTemp.push(binaryString.splice(0, 1)[0]);\n        binTempWhite.push(binaryString.splice(0, 1)[0]);\n      }\n      result.push(binTemp);\n      result.push(binTempWhite);\n      if (binaryString.length === 3) result.push(binaryString.splice(0, 3));\n    } while (binaryString.length > 0);\n  }\n  if (type === \"Codabar\") {\n    totalBars = 7;\n    len = binaryString[0];\n    for (i = 0; i < binaryString.length; i++) {\n      if (binaryString[i] > len * 5) {\n        binaryString.splice(i, binaryString.length);\n        break;\n      }\n    }\n    do {\n      result.push(binaryString.splice(0, totalBars));\n      binaryString.splice(0, 1);\n    } while (binaryString.length > 0);\n  }\n  return result;\n}\n\nfunction BinaryString(img, type) {\n  var binaryString = [];\n  var binTemp = [];\n  var container = 255;\n  var count = 0;\n  var format;\n  var tempString;\n  var j, i;\n  var corrections;\n  for (j = 0; j < img.length - Image.width * 4; j += Image.width * 4) {\n    var SlicedArray = img.subarray(j, j + Image.width * 4);\n    binaryString = [];\n    i = 0;\n    while (SlicedArray[i] === 255) {\n      i += 4;\n    }\n    while (i < SlicedArray.length) {\n      count = 0;\n      container = SlicedArray[i];\n      while (SlicedArray[i] === container && i < SlicedArray.length) {\n        count++;\n        i += 4;\n      }\n      binaryString.push(count);\n    }\n    if (binaryString.length > 2 && binaryString[0] <= binaryString[1] / 10) {\n      binaryString.splice(0, 2);\n    }\n    var binaryHolder = binaryString.slice();\n    var success = false;\n    for (i = 0; i < FormatPriority.length; i++) {\n      binaryString = binaryHolder.slice();\n      var first;\n      var second;\n      binaryString = BinaryConfiguration(binaryString, FormatPriority[i]);\n      if (FormatPriority[i] === \"2Of5\" || FormatPriority[i] === \"Inter2Of5\") {\n        first = binaryString.splice(0, 1)[0];\n        second = binaryString.splice(binaryString.length - 1, 1)[0];\n      }\n      binTemp = Distribution(binaryString, FormatPriority[i]);\n      if (FormatPriority[i] === \"EAN-13\") {\n        binaryString = binTemp.data;\n        corrections = binTemp.correction;\n      } else {\n        binaryString = binTemp;\n      }\n      if (typeof binaryString === 'undefined') continue;\n      if (binaryString.length > 4 || FormatPriority[i] === \"Code39\" && binaryString.length > 2) {\n        if (FormatPriority[i] === \"Code128\") {\n          if (CheckCode128(binaryString)) {\n            binaryString = DecodeCode128(binaryString);\n            success = true;\n          }\n        } else if (FormatPriority[i] === \"Code93\") {\n          if (CheckCode93(binaryString)) {\n            binaryString = DecodeCode93(binaryString);\n            success = true;\n          }\n        } else if (FormatPriority[i] === \"Code39\") {\n          if (CheckCode39(binaryString)) {\n            binaryString = DecodeCode39(binaryString);\n            success = true;\n          }\n        } else if (FormatPriority[i] === \"EAN-13\") {\n          tempString = DecodeEAN13(binaryString);\n          if (tempString) {\n            if (tempString.length === 13) {\n              binaryString = tempString;\n              success = true;\n            }\n          }\n        } else if (FormatPriority[i] === \"2Of5\" || FormatPriority[i] === \"Inter2Of5\") {\n          if (FormatPriority[i] === \"2Of5\") {\n            if (typeof first !== 'undefined') if (!TwoOfFiveStartEnd(first, true)) continue;\n            if (typeof second !== 'undefined') if (!TwoOfFiveStartEnd(second, false)) continue;\n          }\n          if (FormatPriority[i] === \"Inter2Of5\") {\n            if (typeof first !== 'undefined') if (!CheckInterleaved(first, true)) continue;\n            if (typeof second !== 'undefined') if (!CheckInterleaved(second, false)) continue;\n          }\n          tempString = Decode2Of5(binaryString);\n          if (tempString) {\n            binaryString = tempString;\n            success = true;\n          }\n        } else if (FormatPriority[i] === \"Codabar\") {\n          tempString = DecodeCodaBar(binaryString);\n          if (tempString) {\n            binaryString = tempString;\n            success = true;\n          }\n        }\n      }\n      if (success) {\n        format = FormatPriority[i];\n        if (format === \"Inter2Of5\") format = \"Interleaved 2 of 5\";\n        if (format === \"2Of5\") format = \"Standard 2 of 5\";\n        break;\n      }\n    }\n    if (success) break;\n  }\n  if (format === \"Code128\") {\n    if (typeof binaryString.string === 'string') {\n      return binaryString;\n    } else {\n      return {\n        string: false\n      };\n    }\n  }\n  if (typeof binaryString === 'string') {\n    if (format === \"EAN-13\") {\n      return {\n        string: binaryString,\n        format: format,\n        correction: corrections\n      };\n    } else {\n      return {\n        string: binaryString,\n        format: format\n      };\n    }\n  } else {\n    return {\n      string: false\n    };\n  }\n}\n\nfunction Distribution(totalBinArray, type) {\n  var testData = 0;\n  var result = [];\n  var totalBars;\n  var total;\n  var maxLength;\n  var k, i, j;\n  var blackMax;\n  var whiteMax;\n  var wideAvrg;\n  var narrowAvrg;\n  var prevPos;\n  var wideValues;\n  var max;\n\n  type = availableFormats.indexOf(type);\n\n  if (type === 0) {\n    total = 11;\n    totalBars = 6;\n    maxLength = 4;\n  } else if (type === 1) {\n    total = 9;\n    totalBars = 6;\n    maxLength = 4;\n  } else if (type === 2) {\n    total = 12;\n    totalBars = 9;\n  } else if (type === 3) {\n    total = 7;\n    totalBars = 4;\n    maxLength = 4;\n  } else if (type === 6) {\n    totalBars = 7;\n  }\n  for (k = 0; k < totalBinArray.length; k++) {\n    var BinArray = totalBinArray[k];\n    var sum = 0;\n    var counter = 0;\n    var tempBin = [];\n    var narrowArr = [];\n    var wideArr = [];\n    if (type === 6) {\n      var upperTolerance = 1.5;\n      var lowerTolerance = 1 / 2;\n      if (BinArray.length !== 7) return [];\n      if (k === 0 || k === totalBinArray.length - 1) {\n        whiteMax = [[0, 0], [0, 0]];\n        blackMax = [0, 0];\n        for (i = 0; i < BinArray.length; i++) {\n          if (i % 2 === 0) {\n            if (BinArray[i] > blackMax[0]) {\n              blackMax[0] = BinArray[i];\n              blackMax[1] = i;\n            }\n          } else {\n            if (BinArray[i] > whiteMax[0][0]) {\n              whiteMax[0][0] = BinArray[i];\n              prevPos = whiteMax[0][1];\n              whiteMax[0][1] = i;\n              i = prevPos - 1;\n              continue;\n            }\n            if (BinArray[i] > whiteMax[1][0] && i !== whiteMax[0][1]) {\n              whiteMax[1][0] = BinArray[i];\n              whiteMax[1][1] = i;\n            }\n          }\n        }\n        if (SecureCodabar) {\n          wideAvrg = whiteMax[0][0] + whiteMax[1][0] + blackMax[0];\n          wideAvrg /= 3;\n          wideValues = [whiteMax[0][0], whiteMax[1][0], blackMax[0]];\n          for (i = 0; i < wideValues.length; i++) {\n            if (wideValues[i] / wideAvrg > upperTolerance || wideValues[i] / wideAvrg < lowerTolerance) return [];\n          }\n          narrowAvrg = 0;\n          for (i = 0; i < BinArray.length; i++) {\n            if (i === blackMax[1] || i === whiteMax[0][1] || i === whiteMax[1][1]) continue;\n            narrowAvrg += BinArray[i];\n          }\n          narrowAvrg /= 4;\n          for (i = 0; i < BinArray.length; i++) {\n            if (i === blackMax[1] || i === whiteMax[0][1] || i === whiteMax[1][1]) continue;\n            if (BinArray[i] / narrowAvrg > upperTolerance || BinArray[i] / narrowAvrg < lowerTolerance) return [];\n          }\n        }\n        for (i = 0; i < BinArray.length; i++) {\n          if (i === blackMax[1] || i === whiteMax[0][1] || i === whiteMax[1][1]) {\n            tempBin.push(1);\n          } else {\n            tempBin.push(0);\n          }\n        }\n      } else {\n        blackMax = [0, 0];\n        whiteMax = [0, 0];\n        for (i = 0; i < BinArray.length; i++) {\n          if (i % 2 === 0) {\n            if (BinArray[i] > blackMax[0]) {\n              blackMax[0] = BinArray[i];\n              blackMax[1] = i;\n            }\n          } else {\n            if (BinArray[i] > whiteMax[0]) {\n              whiteMax[0] = BinArray[i];\n              whiteMax[1] = i;\n            }\n          }\n        }\n        if (blackMax[0] / whiteMax[0] > 1.55) {\n          var tempArray = blackMax;\n          blackMax = [tempArray, [0, 0], [0, 0]];\n          for (i = 0; i < BinArray.length; i++) {\n            if (i % 2 === 0) {\n              if (BinArray[i] > blackMax[1][0] && i !== blackMax[0][1]) {\n                blackMax[1][0] = BinArray[i];\n                prevPos = blackMax[1][1];\n                blackMax[1][1] = i;\n                i = prevPos - 1;\n                continue;\n              }\n              if (BinArray[i] > blackMax[2][0] && i !== blackMax[0][1] && i !== blackMax[1][1]) {\n                blackMax[2][0] = BinArray[i];\n                blackMax[2][1] = i;\n              }\n            }\n          }\n          if (SecureCodabar) {\n            wideAvrg = blackMax[0][0] + blackMax[1][0] + blackMax[2][0];\n            wideAvrg /= 3;\n            for (i = 0; i < blackMax.length; i++) {\n              if (blackMax[i][0] / wideAvrg > upperTolerance || blackMax[i][0] / wideAvrg < lowerTolerance) return [];\n            }\n            narrowAvrg = 0;\n            for (i = 0; i < BinArray.length; i++) {\n              if (i === blackMax[0][1] || i === blackMax[1][1] || i === blackMax[2][1]) continue;\n              narrowAvrg += BinArray[i];\n            }\n            narrowAvrg /= 4;\n            for (i = 0; i < BinArray.length; i++) {\n              if (i === blackMax[0][1] || i === blackMax[1][1] || i === blackMax[2][1]) continue;\n              if (BinArray[i] / narrowAvrg > upperTolerance || BinArray[i] / narrowAvrg < lowerTolerance) return [];\n            }\n          }\n          for (i = 0; i < BinArray.length; i++) {\n            if (i === blackMax[0][1] || i === blackMax[1][1] || i === blackMax[2][1]) {\n              tempBin.push(1);\n            } else {\n              tempBin.push(0);\n            }\n          }\n        } else {\n          if (SecureCodabar) {\n            wideAvrg = blackMax[0] + whiteMax[0];\n            wideAvrg /= 2;\n            if (blackMax[0] / wideAvrg > 1.5 || blackMax[0] / wideAvrg < 0.5) return [];\n            if (whiteMax[0] / wideAvrg > 1.5 || whiteMax[0] / wideAvrg < 0.5) return [];\n            narrowAvrg = 0;\n            for (i = 0; i < BinArray.length; i++) {\n              if (i === blackMax[1] || i === whiteMax[1]) continue;\n              narrowAvrg += BinArray[i];\n            }\n            narrowAvrg /= 5;\n            for (i = 0; i < BinArray.length; i++) {\n              if (i === blackMax[1] || i === whiteMax[1]) continue;\n              if (BinArray[i] / narrowAvrg > upperTolerance || BinArray[i] / narrowAvrg < lowerTolerance) return [];\n            }\n          }\n          for (i = 0; i < BinArray.length; i++) {\n            if (i === blackMax[1] || i === whiteMax[1]) {\n              tempBin.push(1);\n            } else {\n              tempBin.push(0);\n            }\n          }\n        }\n      }\n      result.push(tempBin);\n      continue;\n    }\n    if (type === 4 || type === 5) {\n      max = [[0, 0], [0, 0]];\n      for (i = 0; i < BinArray.length; i++) {\n        if (!isFinite(BinArray[i])) return [];\n        if (BinArray[i] > max[0][0]) {\n          max[0][0] = BinArray[i];\n          prevPos = max[0][1];\n          max[0][1] = i;\n          i = prevPos - 1;\n        }\n        if (BinArray[i] > max[1][0] && i !== max[0][1]) {\n          max[1][0] = BinArray[i];\n          max[1][1] = i;\n        }\n      }\n      if (Secure2Of5) {\n        wideAvrg = max[0][0] + max[1][0];\n        wideAvrg /= 2;\n        if (max[0][0] / wideAvrg > 1.3 || max[0][0] / wideAvrg < 0.7) return [];\n        if (max[1][0] / wideAvrg > 1.3 || max[1][0] / wideAvrg < 0.7) return [];\n        narrowAvrg = 0;\n        for (i = 0; i < BinArray.length; i++) {\n          if (i === max[0][1] || i === max[1][1]) continue;\n          narrowAvrg += BinArray[i];\n        }\n        narrowAvrg /= 3;\n        for (i = 0; i < BinArray.length; i++) {\n          if (i === max[0][1] || i === max[1][1]) continue;\n          if (BinArray[i] / narrowAvrg > 1.3 || BinArray[i] / narrowAvrg < 0.7) return [];\n        }\n      }\n      for (i = 0; i < BinArray.length; i++) {\n        if (i === max[0][1] || i === max[1][1]) {\n          tempBin.push(1);\n          continue;\n        }\n        tempBin.push(0);\n      }\n      result.push(tempBin);\n      continue;\n    }\n    while (counter < totalBars) {\n      sum += BinArray[counter];\n      counter++;\n    }\n    if (type === 2) {\n      var indexCount = [];\n      blackMax = [[0, 0], [0, 0]];\n      whiteMax = [0, 0];\n      for (j = 0; j < BinArray.length; j++) {\n        if (j % 2 === 0) {\n          if (BinArray[j] > blackMax[0][0]) {\n            blackMax[0][0] = BinArray[j];\n            prevPos = blackMax[0][1];\n            blackMax[0][1] = j;\n            j = prevPos;\n          }\n          if (BinArray[j] > blackMax[1][0] && j !== blackMax[0][1]) {\n            blackMax[1][0] = BinArray[j];\n            blackMax[1][1] = j;\n          }\n        } else {\n          if (BinArray[j] > whiteMax[0]) {\n            whiteMax[0] = BinArray[j];\n            whiteMax[1] = j;\n          }\n        }\n      }\n      if (whiteMax[0] / blackMax[0][0] > 1.5 && whiteMax[0] / blackMax[1][0] > 1.5) {\n        blackMax = [[0, 0], [0, 0]];\n        for (j = 0; j < BinArray.length; j++) {\n          if (j % 2 !== 0) {\n            if (BinArray[j] > blackMax[0][0] && j !== whiteMax[1]) {\n              blackMax[0][0] = BinArray[j];\n              prevPos = blackMax[0][1];\n              blackMax[0][1] = j;\n              j = prevPos;\n            }\n            if (BinArray[j] > blackMax[1][0] && j !== blackMax[0][1] && j !== whiteMax[1]) {\n              blackMax[1][0] = BinArray[j];\n              blackMax[1][1] = j;\n            }\n          }\n        }\n      }\n      wideAvrg = blackMax[0][0] + blackMax[1][0] + whiteMax[0];\n      wideAvrg /= 3;\n      if (blackMax[0][0] / wideAvrg > 1.6 || blackMax[0][0] / wideAvrg < 0.4) return [];\n      if (blackMax[1][0] / wideAvrg > 1.6 || blackMax[1][0] / wideAvrg < 0.4) return [];\n      if (whiteMax[0] / wideAvrg > 1.6 || whiteMax[0] / wideAvrg < 0.4) return [];\n      narrowAvrg = 0;\n      for (i = 0; i < BinArray.length; i++) {\n        if (i === blackMax[0][1] || i === blackMax[1][1] || i === whiteMax[1]) continue;\n        narrowAvrg += BinArray[i];\n      }\n      narrowAvrg /= 6;\n      for (i = 0; i < BinArray.length; i++) {\n        if (i === blackMax[0][1] || i === blackMax[1][1] || i === whiteMax[1]) continue;\n        if (BinArray[i] / narrowAvrg > 1.6 || BinArray[i] / narrowAvrg < 0.4) return [];\n      }\n      for (j = 0; j < BinArray.length; j++) {\n        if (j === blackMax[0][1] || j === blackMax[1][1] || j === whiteMax[1]) {\n          tempBin.push(2);\n        } else {\n          tempBin.push(1);\n        }\n      }\n      result.push(tempBin);\n      continue;\n    }\n    if (type === 3) {\n      max = [[0, 0], [0, 0], [0, 0]];\n      for (j = 0; j < BinArray.length; j++) {\n        if (BinArray[j] > max[0][0]) {\n          max[0][0] = BinArray[j];\n          prevPos = max[0][1];\n          max[0][1] = j;\n          j = prevPos;\n        }\n        if (BinArray[j] > max[1][0] && j !== max[0][1]) {\n          max[1][0] = BinArray[j];\n          prevPos = max[1][1];\n          max[1][1] = j;\n          j = prevPos;\n        }\n        if (BinArray[j] > max[2][0] && j !== max[0][1] && j !== max[1][1]) {\n          max[2][0] = BinArray[j];\n          max[2][1] = j;\n        }\n      }\n      if (max[0][0] / max[1][0] >= 3) {\n        narrowAvrg = 0;\n        for (j = 0; j < BinArray.length; j++) {\n          if (j === max[0][1]) continue;\n          narrowAvrg += BinArray[j];\n        }\n        narrowAvrg /= 3;\n        for (j = 0; j < BinArray.length; j++) {\n          if (j === max[0][1]) continue;\n          if (BinArray[j] / narrowAvrg < 0.02 || BinArray[j] / narrowAvrg > 3) return {\n            data: [],\n            correction: 0\n          };\n        }\n        if (max[0][0] / narrowAvrg < 2.2 || max[0][0] / narrowAvrg > 6) return {\n          data: [],\n          correction: 0\n        };\n        for (j = 0; j < BinArray.length; j++) {\n          if (j === max[0][1]) {\n            tempBin.push(4);\n          } else {\n            tempBin.push(1);\n          }\n        }\n        result.push(tempBin);\n      } else if (max[0][0] / max[2][0] > 2) {\n        wideAvrg = max[0][0] + max[1][0];\n        wideAvrg /= 5;\n        if (max[0][0] / (wideAvrg * 3) < 0.02 || max[0][0] / (wideAvrg * 3) > 3) return {\n          data: [],\n          correction: 0\n        };\n        if (max[1][0] / (wideAvrg * 2) < 0.02 || max[1][0] / (wideAvrg * 2) > 3) return {\n          data: [],\n          correction: 0\n        };\n        narrowAvrg = 0;\n        for (j = 0; j < BinArray.length; j++) {\n          if (j === max[0][1] || j === max[1][1]) continue;\n          narrowAvrg += BinArray[j];\n        }\n        narrowAvrg /= 2;\n        for (j = 0; j < BinArray.length; j++) {\n          if (j === max[0][1] || j === max[1][1]) continue;\n          if (BinArray[j] / narrowAvrg < 0.02 || BinArray[j] / narrowAvrg > 3) return {\n            data: [],\n            correction: 0\n          };\n        }\n        for (j = 0; j < BinArray.length; j++) {\n          if (j === max[0][1]) {\n            tempBin.push(3);\n          } else if (j === max[1][1]) {\n            tempBin.push(2);\n          } else {\n            tempBin.push(1);\n          }\n        }\n        result.push(tempBin);\n      } else {\n        if (max[0][1] % 2 === max[1][1] % 2 && max[0][1] % 2 === max[2][1] % 2) {\n          var modMem = max[0][1] % 2;\n          max[2] = [0, 0];\n          for (j = 0; j < BinArray.length; j++) {\n            if (j % 2 === modMem) continue;\n            if (BinArray[j] > max[2][0]) {\n              max[2][0] = BinArray[j];\n              max[2][1] = j;\n            }\n          }\n        }\n        wideAvrg = max[0][0] + max[1][0] + max[2][0];\n        wideAvrg /= 3;\n        for (j = 0; j < max.length; j++) {\n          if (max[j][0] / wideAvrg < 0.02 || max[j][0] / wideAvrg > 3) return {\n            data: [],\n            correction: 0\n          };\n        }\n        var narrow = 0;\n        for (j = 0; j < BinArray.length; j++) {\n          if (j === max[0][1] || j === max[1][1] || j === max[2][1]) continue;\n          narrow = BinArray[j];\n        }\n        if (wideAvrg / narrow < 0.02 || wideAvrg / narrow > 3) return {\n          data: [],\n          correction: 0\n        };\n        for (j = 0; j < BinArray.length; j++) {\n          if (j === max[0][1] || j === max[1][1] || j === max[2][1]) {\n            tempBin.push(2);\n          } else {\n            tempBin.push(1);\n          }\n        }\n        result.push(tempBin);\n      }\n      for (j = 0; j < tempBin.length; j++) {\n        testData += Math.abs(tempBin[j] - BinArray[j] / sum * total);\n      }\n      continue;\n    }\n    counter = 0;\n    while (counter < totalBars) {\n      tempBin.push(BinArray[counter] / sum * total);\n      counter++;\n    }\n    counter = 0;\n    while (counter < totalBars) {\n      tempBin[counter] = tempBin[counter] > maxLength ? maxLength : tempBin[counter];\n      tempBin[counter] = tempBin[counter] < 1 ? 1 : tempBin[counter];\n      tempBin[counter] = Math.round(tempBin[counter]);\n      counter++;\n    }\n    if (type === 3) {\n      var checking = 0;\n      for (i = 0; i < tempBin.length; i++) {\n        checking += tempBin[i];\n      }\n      if (checking > 7) {\n        max = 0;\n        var hitIndex = 0;\n        for (i = 0; i < tempBin.length; i++) {\n          if (tempBin[i] > max) {\n            max = tempBin[i];\n            hitIndex = i;\n          }\n        }\n        tempBin[hitIndex] = max - (checking - 7);\n      }\n    }\n    if (type === 3) {\n      for (i = 0; i < tempBin.length; i++) {\n        testData += Math.abs(tempBin[i] - BinArray[i] / sum * total);\n      }\n    }\n    result.push(tempBin);\n  }\n  if (type === 3) {\n    return {\n      data: result,\n      correction: testData\n    };\n  } else {\n    return result;\n  }\n}\n\nfunction CheckCode128(string) {\n  var checksum = string[string.length - 2].join(\"\");\n  var i;\n  checksum = Code128Encoding.value.indexOf(checksum);\n  if (checksum === -1) return false;\n  var summarizer = Code128Encoding.value.indexOf(string[0].join(\"\"));\n  if (summarizer === -1) return false;\n  var startChar = Code128Encoding[string[0].join(\"\")];\n  if (typeof startChar === 'undefined') return false;\n  if (startChar !== \"A\" && startChar !== \"B\" && startChar !== \"C\") return false;\n  for (i = 1; i < string.length - 2; i++) {\n    summarizer += Code128Encoding.value.indexOf(string[i].join(\"\")) * i;\n    if (Code128Encoding.value.indexOf(string[i].join(\"\")) === -1) return false;\n  }\n  return summarizer % 103 === checksum;\n}\n\nfunction Decode2Of5(string) {\n  var result = \"\";\n  var i;\n  for (i = 0; i < string.length; i++) {\n    if (TwoOfFiveEncoding.indexOf(string[i].join(\"\")) === -1) return false;\n    result += TwoOfFiveEncoding.indexOf(string[i].join(\"\"));\n  }\n  return result;\n}\n\nfunction DecodeCodaBar(string) {\n  var result = \"\";\n  var start = string[0].join(\"\");\n  var end = string[string.length - 1].join(\"\");\n  var i;\n  if (!(CodaBarEncoding[start] === \"A\" || CodaBarEncoding[start] === \"B\" || CodaBarEncoding[start] === \"C\" || CodaBarEncoding[start] === \"D\")) return false;\n  if (!(CodaBarEncoding[end] === \"A\" || CodaBarEncoding[end] === \"B\" || CodaBarEncoding[end] === \"C\" || CodaBarEncoding[end] === \"D\")) return false;\n  for (i = 1; i < string.length - 1; i++) {\n    if (typeof CodaBarEncoding[string[i].join(\"\")] === 'undefined') return false;\n    result += CodaBarEncoding[string[i].join(\"\")];\n  }\n  return result;\n}\n\nfunction DecodeEAN13(string) {\n  if (string.length !== 12) return false;\n  var leftSide = string.slice(0, 6);\n  var trigger = false;\n  var rightSide = string.slice(6, string.length);\n  var i;\n  for (i = 0; i < leftSide.length; i++) {\n    leftSide[i] = leftSide[i].join(\"\");\n    if (leftSide[i].length !== 4) {\n      trigger = true;\n      break;\n    }\n  }\n  if (trigger) return false;\n  for (i = 0; i < rightSide.length; i++) {\n    rightSide[i] = rightSide[i].join(\"\");\n    if (rightSide[i].length !== 4) {\n      trigger = true;\n      break;\n    }\n  }\n  if (trigger) return false;\n  var decodeFormat = [];\n  for (i = 0; i < leftSide.length; i++) {\n    if (typeof EAN13Encoding.L[leftSide[i]] !== 'undefined') {\n      decodeFormat.push(\"L\");\n    } else if (typeof EAN13Encoding.G[leftSide[i]] !== 'undefined') {\n      decodeFormat.push(\"G\");\n    } else {\n      trigger = true;\n      break;\n    }\n  }\n  if (trigger) return false;\n  var resultArray = [];\n  if (typeof EAN13Encoding.formats[decodeFormat.join(\"\")] === 'undefined') return false;\n  resultArray.push(EAN13Encoding.formats[decodeFormat.join(\"\")]);\n  for (i = 0; i < leftSide.length; i++) {\n    if (typeof EAN13Encoding[decodeFormat[i]][leftSide[i]] === 'undefined') {\n      trigger = true;\n      break;\n    }\n    resultArray.push(EAN13Encoding[decodeFormat[i]][leftSide[i]]);\n  }\n  if (trigger) return false;\n  for (i = 0; i < rightSide.length; i++) {\n    if (typeof EAN13Encoding.R[rightSide[i]] === 'undefined') {\n      trigger = true;\n      break;\n    }\n    resultArray.push(EAN13Encoding.R[rightSide[i]]);\n  }\n  if (trigger) return false;\n  var weight = 3;\n  var sum = 0;\n  for (i = resultArray.length - 2; i >= 0; i--) {\n    sum += resultArray[i] * weight;\n    if (weight === 3) {\n      weight = 1;\n    } else {\n      weight = 3;\n    }\n  }\n  sum = (10 - sum % 10) % 10;\n  if (resultArray[resultArray.length - 1] === sum) {\n    return resultArray.join(\"\");\n  } else {\n    return false;\n  }\n}\n\nfunction CheckCode93(string) {\n  var checkOne = string[string.length - 3].join(\"\");\n  var checkTwo = string[string.length - 2].join(\"\");\n  var failSafe = true;\n  if (typeof Code93Encoding[checkOne] === 'undefined') return false;\n  if (typeof Code93Encoding[checkTwo] === 'undefined') return false;\n  var checkSum = Code93Encoding[checkOne].value;\n  var weight = 1;\n  var sum = 0;\n  var i;\n  for (i = string.length - 4; i > 0; i--) {\n    failSafe = typeof Code93Encoding[string[i].join(\"\")] === 'undefined' ? false : failSafe;\n    if (!failSafe) break;\n    sum += Code93Encoding[string[i].join(\"\")].value * weight;\n    weight++;\n    if (weight > 20) weight = 1;\n  }\n  var firstCheck = sum % 47;\n  var firstBool = firstCheck === checkSum;\n  if (!firstBool) return false;\n  if (!failSafe) return false;\n  sum = firstCheck;\n  weight = 2;\n  checkSum = Code93Encoding[checkTwo].value;\n  for (i = string.length - 4; i > 0; i--) {\n    failSafe = typeof Code93Encoding[string[i].join(\"\")] === 'undefined' ? false : failSafe;\n    if (!failSafe) break;\n    sum += Code93Encoding[string[i].join(\"\")].value * weight;\n    weight++;\n    if (weight > 15) weight = 1;\n  }\n  var secondCheck = sum % 47;\n  var secondBool = secondCheck === checkSum;\n  return secondBool && firstBool;\n}\n\nfunction CheckCode39(string) {\n  var trigger = true;\n  if (typeof Code39Encoding[string[0].join(\"\")] === 'undefined') return false;\n  if (Code39Encoding[string[0].join(\"\")].character !== \"*\") return false;\n  if (typeof Code39Encoding[string[string.length - 1].join(\"\")] === 'undefined') return false;\n  if (Code39Encoding[string[string.length - 1].join(\"\")].character !== \"*\") return false;\n  for (i = 1; i < string.length - 1; i++) {\n    if (typeof Code39Encoding[string[i].join(\"\")] === 'undefined') {\n      trigger = false;\n      break;\n    }\n  }\n  return trigger;\n}\n\nfunction DecodeCode39(string) {\n  var resultString = \"\";\n  var special = false;\n  var character = \"\";\n  var specialchar = \"\";\n  for (i = 1; i < string.length - 1; i++) {\n    character = Code39Encoding[string[i].join(\"\")].character;\n    if (character === \"$\" || character === \"/\" || character === \"+\" || character === \"%\") {\n      // if next character exists => this a special character\n      if (i + 1 < string.length - 1) {\n        special = true;\n        specialchar = character;\n        continue;\n      }\n    }\n    if (special) {\n      if (typeof ExtendedEncoding[specialchar + character] === 'undefined') {} else {\n        resultString += ExtendedEncoding[specialchar + character];\n      }\n      special = false;\n      continue;\n    }\n    resultString += character;\n  }\n  return resultString;\n}\n\nfunction DecodeCode93(string) {\n  var resultString = \"\";\n  var special = false;\n  var character = \"\";\n  var specialchar = \"\";\n  for (i = 1; i < string.length - 3; i++) {\n    character = Code93Encoding[string[i].join(\"\")].character;\n    if (character === \"($)\" || character === \"(/)\" || character === \"(+)\" || character === \"(%)\") {\n      special = true;\n      specialchar = character[1];\n      continue;\n    }\n    if (special) {\n      if (typeof ExtendedEncoding[specialchar + character] === 'undefined') {} else {\n        resultString += ExtendedEncoding[specialchar + character];\n      }\n      special = false;\n      continue;\n    }\n    resultString += character;\n  }\n  return resultString;\n}\n\nfunction DecodeCode128(string) {\n  var set = Code128Encoding[string[0].join(\"\")];\n  var symbol;\n  var Code128Format = \"Code128\";\n  var resultString = \"\";\n  var i;\n  for (i = 1; i < string.length - 2; i++) {\n    symbol = Code128Encoding[string[i].join(\"\")][set];\n    switch (symbol) {\n      case \"FNC1\":\n        if (i === 1) Code128Format = \"GS1-128\";\n        break;\n      case \"FNC2\":\n      case \"FNC3\":\n      case \"FNC4\":\n        break;\n      case \"SHIFT_B\":\n        i++;\n        resultString += Code128Encoding[string[i].join(\"\")].B;\n        break;\n      case \"SHIFT_A\":\n        i++;\n        resultString += Code128Encoding[string[i].join(\"\")].A;\n        break;\n      case \"Code_A\":\n        set = \"A\";\n        break;\n      case \"Code_B\":\n        set = \"B\";\n        break;\n      case \"Code_C\":\n        set = \"C\";\n        break;\n      default:\n        resultString += symbol;\n    }\n  }\n  return {\n    string: resultString,\n    format: Code128Format\n  };\n}\nvar TwoOfFiveEncoding = [\"00110\", \"10001\", \"01001\", \"11000\", \"00101\", \"10100\", \"01100\", \"00011\", \"10010\", \"01010\"];\nvar Code128Encoding = {\n  \"212222\": {\n    A: \" \",\n    B: \" \",\n    C: \"00\"\n  },\n  \"222122\": {\n    A: \"!\",\n    B: \"!\",\n    C: \"01\"\n  },\n  \"222221\": {\n    A: '\"',\n    B: '\"',\n    C: \"02\"\n  },\n  \"121223\": {\n    A: \"#\",\n    B: \"#\",\n    C: \"03\"\n  },\n  \"121322\": {\n    A: \"$\",\n    B: \"$\",\n    C: \"04\"\n  },\n  \"131222\": {\n    A: \"%\",\n    B: \"%\",\n    C: \"05\"\n  },\n  \"122213\": {\n    A: \"&\",\n    B: \"&\",\n    C: \"06\"\n  },\n  \"122312\": {\n    A: \"'\",\n    B: \"'\",\n    C: \"07\"\n  },\n  \"132212\": {\n    A: \"(\",\n    B: \"(\",\n    C: \"08\"\n  },\n  \"221213\": {\n    A: \")\",\n    B: \")\",\n    C: \"09\"\n  },\n  \"221312\": {\n    A: \"*\",\n    B: \"*\",\n    C: \"10\"\n  },\n  \"231212\": {\n    A: \"+\",\n    B: \"+\",\n    C: \"11\"\n  },\n  \"112232\": {\n    A: \",\",\n    B: \",\",\n    C: \"12\"\n  },\n  \"122132\": {\n    A: \"-\",\n    B: \"-\",\n    C: \"13\"\n  },\n  \"122231\": {\n    A: \".\",\n    B: \".\",\n    C: \"14\"\n  },\n  \"113222\": {\n    A: \"/\",\n    B: \"/\",\n    C: \"15\"\n  },\n  \"123122\": {\n    A: \"0\",\n    B: \"0\",\n    C: \"16\"\n  },\n  \"123221\": {\n    A: \"1\",\n    B: \"1\",\n    C: \"17\"\n  },\n  \"223211\": {\n    A: \"2\",\n    B: \"2\",\n    C: \"18\"\n  },\n  \"221132\": {\n    A: \"3\",\n    B: \"3\",\n    C: \"19\"\n  },\n  \"221231\": {\n    A: \"4\",\n    B: \"4\",\n    C: \"20\"\n  },\n  \"213212\": {\n    A: \"5\",\n    B: \"5\",\n    C: \"21\"\n  },\n  \"223112\": {\n    A: \"6\",\n    B: \"6\",\n    C: \"22\"\n  },\n  \"312131\": {\n    A: \"7\",\n    B: \"7\",\n    C: \"23\"\n  },\n  \"311222\": {\n    A: \"8\",\n    B: \"8\",\n    C: \"24\"\n  },\n  \"321122\": {\n    A: \"9\",\n    B: \"9\",\n    C: \"25\"\n  },\n  \"321221\": {\n    A: \":\",\n    B: \":\",\n    C: \"26\"\n  },\n  \"312212\": {\n    A: \";\",\n    B: \";\",\n    C: \"27\"\n  },\n  \"322112\": {\n    A: \"<\",\n    B: \"<\",\n    C: \"28\"\n  },\n  \"322211\": {\n    A: \"=\",\n    B: \"=\",\n    C: \"29\"\n  },\n  \"212123\": {\n    A: \">\",\n    B: \">\",\n    C: \"30\"\n  },\n  \"212321\": {\n    A: \"?\",\n    B: \"?\",\n    C: \"31\"\n  },\n  \"232121\": {\n    A: \"@\",\n    B: \"@\",\n    C: \"32\"\n  },\n  \"111323\": {\n    A: \"A\",\n    B: \"A\",\n    C: \"33\"\n  },\n  \"131123\": {\n    A: \"B\",\n    B: \"B\",\n    C: \"34\"\n  },\n  \"131321\": {\n    A: \"C\",\n    B: \"C\",\n    C: \"35\"\n  },\n  \"112313\": {\n    A: \"D\",\n    B: \"D\",\n    C: \"36\"\n  },\n  \"132113\": {\n    A: \"E\",\n    B: \"E\",\n    C: \"37\"\n  },\n  \"132311\": {\n    A: \"F\",\n    B: \"F\",\n    C: \"38\"\n  },\n  \"211313\": {\n    A: \"G\",\n    B: \"G\",\n    C: \"39\"\n  },\n  \"231113\": {\n    A: \"H\",\n    B: \"H\",\n    C: \"40\"\n  },\n  \"231311\": {\n    A: \"I\",\n    B: \"I\",\n    C: \"41\"\n  },\n  \"112133\": {\n    A: \"J\",\n    B: \"J\",\n    C: \"42\"\n  },\n  \"112331\": {\n    A: \"K\",\n    B: \"K\",\n    C: \"43\"\n  },\n  \"132131\": {\n    A: \"L\",\n    B: \"L\",\n    C: \"44\"\n  },\n  \"113123\": {\n    A: \"M\",\n    B: \"M\",\n    C: \"45\"\n  },\n  \"113321\": {\n    A: \"N\",\n    B: \"N\",\n    C: \"46\"\n  },\n  \"133121\": {\n    A: \"O\",\n    B: \"O\",\n    C: \"47\"\n  },\n  \"313121\": {\n    A: \"P\",\n    B: \"P\",\n    C: \"48\"\n  },\n  \"211331\": {\n    A: \"Q\",\n    B: \"Q\",\n    C: \"49\"\n  },\n  \"231131\": {\n    A: \"R\",\n    B: \"R\",\n    C: \"50\"\n  },\n  \"213113\": {\n    A: \"S\",\n    B: \"S\",\n    C: \"51\"\n  },\n  \"213311\": {\n    A: \"T\",\n    B: \"T\",\n    C: \"52\"\n  },\n  \"213131\": {\n    A: \"U\",\n    B: \"U\",\n    C: \"53\"\n  },\n  \"311123\": {\n    A: \"V\",\n    B: \"V\",\n    C: \"54\"\n  },\n  \"311321\": {\n    A: \"W\",\n    B: \"W\",\n    C: \"55\"\n  },\n  \"331121\": {\n    A: \"X\",\n    B: \"X\",\n    C: \"56\"\n  },\n  \"312113\": {\n    A: \"Y\",\n    B: \"Y\",\n    C: \"57\"\n  },\n  \"312311\": {\n    A: \"Z\",\n    B: \"Z\",\n    C: \"58\"\n  },\n  \"332111\": {\n    A: \"[\",\n    B: \"[\",\n    C: \"59\"\n  },\n  \"314111\": {\n    A: \"\\\\\",\n    B: \"\\\\\",\n    C: \"60\"\n  },\n  \"221411\": {\n    A: \"]\",\n    B: \"]\",\n    C: \"61\"\n  },\n  \"431111\": {\n    A: \"^\",\n    B: \"^\",\n    C: \"62\"\n  },\n  \"111224\": {\n    A: \"_\",\n    B: \"_\",\n    C: \"63\"\n  },\n  \"111422\": {\n    A: \"NUL\",\n    B: \"`\",\n    C: \"64\"\n  },\n  \"121124\": {\n    A: \"SOH\",\n    B: \"a\",\n    C: \"65\"\n  },\n  \"121421\": {\n    A: \"STX\",\n    B: \"b\",\n    C: \"66\"\n  },\n  \"141122\": {\n    A: \"ETX\",\n    B: \"c\",\n    C: \"67\"\n  },\n  \"141221\": {\n    A: \"EOT\",\n    B: \"d\",\n    C: \"68\"\n  },\n  \"112214\": {\n    A: \"ENQ\",\n    B: \"e\",\n    C: \"69\"\n  },\n  \"112412\": {\n    A: \"ACK\",\n    B: \"f\",\n    C: \"70\"\n  },\n  \"122114\": {\n    A: \"BEL\",\n    B: \"g\",\n    C: \"71\"\n  },\n  \"122411\": {\n    A: \"BS\",\n    B: \"h\",\n    C: \"72\"\n  },\n  \"142112\": {\n    A: \"HT\",\n    B: \"i\",\n    C: \"73\"\n  },\n  \"142211\": {\n    A: \"LF\",\n    B: \"j\",\n    C: \"74\"\n  },\n  \"241211\": {\n    A: \"VT\",\n    B: \"k\",\n    C: \"75\"\n  },\n  \"221114\": {\n    A: \"FF\",\n    B: \"l\",\n    C: \"76\"\n  },\n  \"413111\": {\n    A: \"CR\",\n    B: \"m\",\n    C: \"77\"\n  },\n  \"241112\": {\n    A: \"SO\",\n    B: \"n\",\n    C: \"78\"\n  },\n  \"134111\": {\n    A: \"SI\",\n    B: \"o\",\n    C: \"79\"\n  },\n  \"111242\": {\n    A: \"DLE\",\n    B: \"p\",\n    C: \"80\"\n  },\n  \"121142\": {\n    A: \"DC1\",\n    B: \"q\",\n    C: \"81\"\n  },\n  \"121241\": {\n    A: \"DC2\",\n    B: \"r\",\n    C: \"82\"\n  },\n  \"114212\": {\n    A: \"DC3\",\n    B: \"s\",\n    C: \"83\"\n  },\n  \"124112\": {\n    A: \"DC4\",\n    B: \"t\",\n    C: \"84\"\n  },\n  \"124211\": {\n    A: \"NAK\",\n    B: \"u\",\n    C: \"85\"\n  },\n  \"411212\": {\n    A: \"SYN\",\n    B: \"v\",\n    C: \"86\"\n  },\n  \"421112\": {\n    A: \"ETB\",\n    B: \"w\",\n    C: \"87\"\n  },\n  \"421211\": {\n    A: \"CAN\",\n    B: \"x\",\n    C: \"88\"\n  },\n  \"212141\": {\n    A: \"EM\",\n    B: \"y\",\n    C: \"89\"\n  },\n  \"214121\": {\n    A: \"SUB\",\n    B: \"z\",\n    C: \"90\"\n  },\n  \"412121\": {\n    A: \"ESC\",\n    B: \"{\",\n    C: \"91\"\n  },\n  \"111143\": {\n    A: \"FS\",\n    B: \"|\",\n    C: \"92\"\n  },\n  \"111341\": {\n    A: \"GS\",\n    B: \"}\",\n    C: \"93\"\n  },\n  \"131141\": {\n    A: \"RS\",\n    B: \"~\",\n    C: \"94\"\n  },\n  \"114113\": {\n    A: \"US\",\n    B: \"DEL\",\n    C: \"95\"\n  },\n  \"114311\": {\n    A: \"FNC3\",\n    B: \"FNC3\",\n    C: \"96\"\n  },\n  \"411113\": {\n    A: \"FNC2\",\n    B: \"FNC2\",\n    C: \"97\"\n  },\n  \"411311\": {\n    A: \"SHIFT_B\",\n    B: \"SHIFT_A\",\n    C: \"98\"\n  },\n  \"113141\": {\n    A: \"Code_C\",\n    B: \"Code_C\",\n    C: \"99\"\n  },\n  \"114131\": {\n    A: \"Code_B\",\n    B: \"FNC4\",\n    C: \"Code_B\"\n  },\n  \"311141\": {\n    A: \"FNC4\",\n    B: \"Code_A\",\n    C: \"Code_A\"\n  },\n  \"411131\": {\n    A: \"FNC1\",\n    B: \"FNC1\",\n    C: \"FNC1\"\n  },\n  \"211412\": \"A\",\n  \"211214\": \"B\",\n  \"211232\": \"C\",\n  \"233111\": {\n    A: \"STOP\",\n    B: \"STOP\",\n    C: \"STOP\"\n  },\n  value: [\"212222\", \"222122\", \"222221\", \"121223\", \"121322\", \"131222\", \"122213\", \"122312\", \"132212\", \"221213\", \"221312\", \"231212\", \"112232\", \"122132\", \"122231\", \"113222\", \"123122\", \"123221\", \"223211\", \"221132\", \"221231\", \"213212\", \"223112\", \"312131\", \"311222\", \"321122\", \"321221\", \"312212\", \"322112\", \"322211\", \"212123\", \"212321\", \"232121\", \"111323\", \"131123\", \"131321\", \"112313\", \"132113\", \"132311\", \"211313\", \"231113\", \"231311\", \"112133\", \"112331\", \"132131\", \"113123\", \"113321\", \"133121\", \"313121\", \"211331\", \"231131\", \"213113\", \"213311\", \"213131\", \"311123\", \"311321\", \"331121\", \"312113\", \"312311\", \"332111\", \"314111\", \"221411\", \"431111\", \"111224\", \"111422\", \"121124\", \"121421\", \"141122\", \"141221\", \"112214\", \"112412\", \"122114\", \"122411\", \"142112\", \"142211\", \"241211\", \"221114\", \"413111\", \"241112\", \"134111\", \"111242\", \"121142\", \"121241\", \"114212\", \"124112\", \"124211\", \"411212\", \"421112\", \"421211\", \"212141\", \"214121\", \"412121\", \"111143\", \"111341\", \"131141\", \"114113\", \"114311\", \"411113\", \"411311\", \"113141\", \"114131\", \"311141\", \"411131\", \"211412\", \"211214\", \"211232\", \"233111\"]\n};\n\nvar Code93Encoding = {\n  \"131112\": {\n    value: 0,\n    character: \"0\"\n  },\n  \"111213\": {\n    value: 1,\n    character: \"1\"\n  },\n  \"111312\": {\n    value: 2,\n    character: \"2\"\n  },\n  \"111411\": {\n    value: 3,\n    character: \"3\"\n  },\n  \"121113\": {\n    value: 4,\n    character: \"4\"\n  },\n  \"121212\": {\n    value: 5,\n    character: \"5\"\n  },\n  \"121311\": {\n    value: 6,\n    character: \"6\"\n  },\n  \"111114\": {\n    value: 7,\n    character: \"7\"\n  },\n  \"131211\": {\n    value: 8,\n    character: \"8\"\n  },\n  \"141111\": {\n    value: 9,\n    character: \"9\"\n  },\n  \"211113\": {\n    value: 10,\n    character: \"A\"\n  },\n  \"211212\": {\n    value: 11,\n    character: \"B\"\n  },\n  \"211311\": {\n    value: 12,\n    character: \"C\"\n  },\n  \"221112\": {\n    value: 13,\n    character: \"D\"\n  },\n  \"221211\": {\n    value: 14,\n    character: \"E\"\n  },\n  \"231111\": {\n    value: 15,\n    character: \"F\"\n  },\n  \"112113\": {\n    value: 16,\n    character: \"G\"\n  },\n  \"112212\": {\n    value: 17,\n    character: \"H\"\n  },\n  \"112311\": {\n    value: 18,\n    character: \"I\"\n  },\n  \"122112\": {\n    value: 19,\n    character: \"J\"\n  },\n  \"132111\": {\n    value: 20,\n    character: \"K\"\n  },\n  \"111123\": {\n    value: 21,\n    character: \"L\"\n  },\n  \"111222\": {\n    value: 22,\n    character: \"M\"\n  },\n  \"111321\": {\n    value: 23,\n    character: \"N\"\n  },\n  \"121122\": {\n    value: 24,\n    character: \"O\"\n  },\n  \"131121\": {\n    value: 25,\n    character: \"P\"\n  },\n  \"212112\": {\n    value: 26,\n    character: \"Q\"\n  },\n  \"212211\": {\n    value: 27,\n    character: \"R\"\n  },\n  \"211122\": {\n    value: 28,\n    character: \"S\"\n  },\n  \"211221\": {\n    value: 29,\n    character: \"T\"\n  },\n  \"221121\": {\n    value: 30,\n    character: \"U\"\n  },\n  \"222111\": {\n    value: 31,\n    character: \"V\"\n  },\n  \"112122\": {\n    value: 32,\n    character: \"W\"\n  },\n  \"112221\": {\n    value: 33,\n    character: \"X\"\n  },\n  \"122121\": {\n    value: 34,\n    character: \"Y\"\n  },\n  \"123111\": {\n    value: 35,\n    character: \"Z\"\n  },\n  \"121131\": {\n    value: 36,\n    character: \"-\"\n  },\n  \"311112\": {\n    value: 37,\n    character: \".\"\n  },\n  \"311211\": {\n    value: 38,\n    character: \" \"\n  },\n  \"321111\": {\n    value: 39,\n    character: \"$\"\n  },\n  \"112131\": {\n    value: 40,\n    character: \"/\"\n  },\n  \"113121\": {\n    value: 41,\n    character: \"+\"\n  },\n  \"211131\": {\n    value: 42,\n    character: \"%\"\n  },\n  \"121221\": {\n    value: 43,\n    character: \"($)\"\n  },\n  \"312111\": {\n    value: 44,\n    character: \"(%)\"\n  },\n  \"311121\": {\n    value: 45,\n    character: \"(/)\"\n  },\n  \"122211\": {\n    value: 46,\n    character: \"(+)\"\n  },\n  \"111141\": {\n    value: -1,\n    character: \"*\"\n  }\n};\n\nvar Code39Encoding = {\n  \"111221211\": {\n    value: 0,\n    character: \"0\"\n  },\n  \"211211112\": {\n    value: 1,\n    character: \"1\"\n  },\n  \"112211112\": {\n    value: 2,\n    character: \"2\"\n  },\n  \"212211111\": {\n    value: 3,\n    character: \"3\"\n  },\n  \"111221112\": {\n    value: 4,\n    character: \"4\"\n  },\n  \"211221111\": {\n    value: 5,\n    character: \"5\"\n  },\n  \"112221111\": {\n    value: 6,\n    character: \"6\"\n  },\n  \"111211212\": {\n    value: 7,\n    character: \"7\"\n  },\n  \"211211211\": {\n    value: 8,\n    character: \"8\"\n  },\n  \"112211211\": {\n    value: 9,\n    character: \"9\"\n  },\n  \"211112112\": {\n    value: 10,\n    character: \"A\"\n  },\n  \"112112112\": {\n    value: 11,\n    character: \"B\"\n  },\n  \"212112111\": {\n    value: 12,\n    character: \"C\"\n  },\n  \"111122112\": {\n    value: 13,\n    character: \"D\"\n  },\n  \"211122111\": {\n    value: 14,\n    character: \"E\"\n  },\n  \"112122111\": {\n    value: 15,\n    character: \"F\"\n  },\n  \"111112212\": {\n    value: 16,\n    character: \"G\"\n  },\n  \"211112211\": {\n    value: 17,\n    character: \"H\"\n  },\n  \"112112211\": {\n    value: 18,\n    character: \"I\"\n  },\n  \"111122211\": {\n    value: 19,\n    character: \"J\"\n  },\n  \"211111122\": {\n    value: 20,\n    character: \"K\"\n  },\n  \"112111122\": {\n    value: 21,\n    character: \"L\"\n  },\n  \"212111121\": {\n    value: 22,\n    character: \"M\"\n  },\n  \"111121122\": {\n    value: 23,\n    character: \"N\"\n  },\n  \"211121121\": {\n    value: 24,\n    character: \"O\"\n  },\n  \"112121121\": {\n    value: 25,\n    character: \"P\"\n  },\n  \"111111222\": {\n    value: 26,\n    character: \"Q\"\n  },\n  \"211111221\": {\n    value: 27,\n    character: \"R\"\n  },\n  \"112111221\": {\n    value: 28,\n    character: \"S\"\n  },\n  \"111121221\": {\n    value: 29,\n    character: \"T\"\n  },\n  \"221111112\": {\n    value: 30,\n    character: \"U\"\n  },\n  \"122111112\": {\n    value: 31,\n    character: \"V\"\n  },\n  \"222111111\": {\n    value: 32,\n    character: \"W\"\n  },\n  \"121121112\": {\n    value: 33,\n    character: \"X\"\n  },\n  \"221121111\": {\n    value: 34,\n    character: \"Y\"\n  },\n  \"122121111\": {\n    value: 35,\n    character: \"Z\"\n  },\n  \"121111212\": {\n    value: 36,\n    character: \"-\"\n  },\n  \"221111211\": {\n    value: 37,\n    character: \".\"\n  },\n  \"122111211\": {\n    value: 38,\n    character: \" \"\n  },\n  \"121212111\": {\n    value: 39,\n    character: \"$\"\n  },\n  \"121211121\": {\n    value: 40,\n    character: \"/\"\n  },\n  \"121112121\": {\n    value: 41,\n    character: \"+\"\n  },\n  \"111212121\": {\n    value: 42,\n    character: \"%\"\n  },\n  \"121121211\": {\n    value: -1,\n    character: \"*\"\n  }\n};\n\nvar ExtendedEncoding = {\n  \"/A\": '!',\n  \"/B\": '\"',\n  \"/C\": '#',\n  \"/D\": '$',\n  \"/E\": '%',\n  \"/F\": '&',\n  \"/G\": \"'\",\n  \"/H\": '(',\n  \"/I\": ')',\n  \"/J\": '*',\n  \"/K\": '+',\n  \"/L\": ',',\n  \"/O\": '/',\n  \"/Z\": ':',\n  \"%F\": ';',\n  \"%G\": '<',\n  \"%H\": '=',\n  \"%I\": '>',\n  \"%J\": '?',\n  \"%K\": '[',\n  \"%L\": \"\\\\\",\n  \"%M\": ']',\n  \"%N\": '^',\n  \"%O\": '_',\n  \"+A\": 'a',\n  \"+B\": 'b',\n  \"+C\": 'c',\n  \"+D\": 'd',\n  \"+E\": 'e',\n  \"+F\": 'f',\n  \"+G\": 'g',\n  \"+H\": 'h',\n  \"+I\": 'i',\n  \"+J\": 'j',\n  \"+K\": 'k',\n  \"+L\": 'l',\n  \"+M\": 'm',\n  \"+N\": 'n',\n  \"+O\": 'o',\n  \"+P\": 'p',\n  \"+Q\": 'q',\n  \"+R\": 'r',\n  \"+S\": 's',\n  \"+T\": 't',\n  \"+U\": 'u',\n  \"+V\": 'v',\n  \"+W\": 'w',\n  \"+X\": 'x',\n  \"+Y\": 'y',\n  \"+Z\": 'z',\n  \"%P\": \"{\",\n  \"%Q\": '|',\n  \"%R\": '|',\n  \"%S\": '~'\n};\n\nvar CodaBarEncoding = {\n  \"0000011\": \"0\",\n  \"0000110\": \"1\",\n  \"0001001\": \"2\",\n  \"1100000\": \"3\",\n  \"0010010\": \"4\",\n  \"1000010\": \"5\",\n  \"0100001\": \"6\",\n  \"0100100\": \"7\",\n  \"0110000\": \"8\",\n  \"1001000\": \"9\",\n  \"0001100\": \"-\",\n  \"0011000\": \"$\",\n  \"1000101\": \":\",\n  \"1010001\": \"/\",\n  \"1010100\": \".\",\n  \"0011111\": \"+\",\n  \"0011010\": \"A\",\n  \"0001011\": \"B\",\n  \"0101001\": \"C\",\n  \"0001110\": \"D\"\n};\n\nvar EAN13Encoding = {\n  \"L\": {\n    \"3211\": 0,\n    \"2221\": 1,\n    \"2122\": 2,\n    \"1411\": 3,\n    \"1132\": 4,\n    \"1231\": 5,\n    \"1114\": 6,\n    \"1312\": 7,\n    \"1213\": 8,\n    \"3112\": 9\n  },\n  \"G\": {\n    \"1123\": 0,\n    \"1222\": 1,\n    \"2212\": 2,\n    \"1141\": 3,\n    \"2311\": 4,\n    \"1321\": 5,\n    \"4111\": 6,\n    \"2131\": 7,\n    \"3121\": 8,\n    \"2113\": 9\n  },\n  \"R\": {\n    \"3211\": 0,\n    \"2221\": 1,\n    \"2122\": 2,\n    \"1411\": 3,\n    \"1132\": 4,\n    \"1231\": 5,\n    \"1114\": 6,\n    \"1312\": 7,\n    \"1213\": 8,\n    \"3112\": 9\n  },\n  formats: {\n    \"LLLLLL\": 0,\n    \"LLGLGG\": 1,\n    \"LLGGLG\": 2,\n    \"LLGGGL\": 3,\n    \"LGLLGG\": 4,\n    \"LGGLLG\": 5,\n    \"LGGGLL\": 6,\n    \"LGLGLG\": 7,\n    \"LGLGGL\": 8,\n    \"LGGLGL\": 9\n  }\n};\n\nself.onmessage = function (e) {\n  var width;\n  var i;\n\n  ScanImage = {\n    data: new Uint8ClampedArray(e.data.scan),\n    width: e.data.scanWidth,\n    height: e.data.scanHeight\n  };\n  switch (e.data.rotation) {\n    case 8:\n      ScanImage.data = Rotate(ScanImage.data, ScanImage.width, ScanImage.height, -90);\n      width = e.data.scanWidth;\n      ScanImage.width = ScanImage.height;\n      ScanImage.height = width;\n      break;\n    case 6:\n      ScanImage.data = Rotate(ScanImage.data, ScanImage.width, ScanImage.height, 90);\n      width = e.data.scanWidth;\n      ScanImage.width = ScanImage.height;\n      ScanImage.height = width;\n      break;\n    case 3:\n      ScanImage.data = Rotate(ScanImage.data, ScanImage.width, ScanImage.height, 180);\n  }\n  Image = {\n    data: Scale(ScanImage.data, ScanImage.width, ScanImage.height),\n    width: ScanImage.width / 2,\n    height: ScanImage.height / 2\n  };\n  if (e.data.postOrientation) {\n    postMessage({\n      result: Image,\n      success: \"orientationData\"\n    });\n  }\n  FormatPriority = [];\n  var decodeFormats = [\"Code128\", \"Code93\", \"Code39\", \"EAN-13\", \"2Of5\", \"Inter2Of5\", \"Codabar\"];\n  Multiple = true;\n  if (typeof e.data.multiple !== 'undefined') {\n    Multiple = e.data.multiple;\n  }\n  if (typeof e.data.decodeFormats !== 'undefined') {\n    decodeFormats = e.data.decodeFormats;\n  }\n  for (i = 0; i < decodeFormats.length; i++) {\n    FormatPriority.push(decodeFormats[i]);\n  }\n  Locations = [];\n  CreateTable();\n  CreateScanTable();\n  var FinalResult = Main();\n  if (FinalResult.length > 0) {\n    postMessage({\n      id: e.data.id,\n      result: FinalResult,\n      success: true\n    });\n  } else {\n    postMessage({\n      id: e.data.id,\n      result: FinalResult,\n      success: false\n    });\n  }\n};\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=e4449361aebfbac52e5b.worker.js.map", __webpack_require__.p + "e4449361aebfbac52e5b.worker.js");
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Worker = __webpack_require__(0);

var worker = new Worker();

var DECODE_FORMATS = ['Code128', 'Code93', 'Code39', 'EAN-13', '2Of5', 'Inter2Of5', 'Codabar'];

var lastMsgId = 0;
var resolves = {};
var rejects = {};

var BarcodeReaderImageCallback = function BarcodeReaderImageCallback(e) {
  if (e.data.success === 'localization') {
    // console.log('Localization', e.data.result)
    return;
  }
  if (e.data.success === 'orientationData') {
    // console.log('Orientation', e.data.result)
    return;
  }

  // transform results in e.data.result
  var id = e.data.id;
  var resolve = resolves[id];
  // const results = [
  //   {
  //     boundingBox: {
  //       x: 10,
  //       y: 20,
  //       width: 30,
  //       height: 40,
  //     },
  //     cornerPoints: [
  //       {x: 10, y: 10},
  //       {x: 20, y: 10},
  //       {x: 20, y: 20},
  //       {x: 10, y: 20},
  //     ],
  //     rawValue: '1234567890'
  //   }
  // ]

  if (resolve !== undefined) {
    var results = e.data.result.map(function (res) {
      return {
        boundingBox: res.bBox,
        cornerPoints: [{ x: res.bBox.x, y: res.bBox.y }, { x: res.bBox.x + res.bBox.width, y: res.bBox.y }, { x: res.bBox.x + res.bBox.width, y: res.bBox.y + res.bBox.height }, { x: res.bBox.x, y: res.bBox.y + res.bBox.height }],
        rawValue: res.Value
      };
    });

    resolve(results);
  }

  // cleanup
  delete resolves[id];
  delete rejects[id];
};

var scanCanvas = void 0,
    scanContext = void 0;

var Library = function () {
  function Library() {
    _classCallCheck(this, Library);

    worker.onmessage = BarcodeReaderImageCallback;
    scanCanvas = document.createElement('canvas');
    scanCanvas.width = 640;
    scanCanvas.height = 480;
    scanContext = scanCanvas.getContext('2d');
  }

  _createClass(Library, [{
    key: 'detect',
    value: function detect(image) {
      return new Promise(function (resolve, reject) {
        var msgId = lastMsgId++;

        // book keeping
        resolves[msgId] = resolve;
        rejects[msgId] = reject;

        scanContext.drawImage(image, 0, 0, scanCanvas.width, scanCanvas.height);

        var msg = {
          scan: scanContext.getImageData(0, 0, scanCanvas.width, scanCanvas.height).data,
          scanWidth: scanCanvas.width,
          scanHeight: scanCanvas.height,
          multiple: true,
          decodeFormats: DECODE_FORMATS,
          cmd: 'normal',
          rotation: 1,
          postOrientation: false,
          id: msgId
        };

        worker.postMessage(msg);

        msg = null;
      });
    }
  }]);

  return Library;
}();

exports.default = Library;
module.exports = exports['default'];

/***/ }),
/* 2 */
/***/ (function(module, exports) {

// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string

var URL = window.URL || window.webkitURL;
module.exports = function(content, url) {
  try {
    try {
      var blob;
      try { // BlobBuilder = Deprecated, but widely implemented
        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
        blob = new BlobBuilder();
        blob.append(content);
        blob = blob.getBlob();
      } catch(e) { // The proposed API
        blob = new Blob([content]);
      }
      return new Worker(URL.createObjectURL(blob));
    } catch(e) {
      return new Worker('data:application/javascript,' + encodeURIComponent(content));
    }
  } catch(e) {
    if (!url) {
      throw Error('Inline worker is not supported');
    }
    return new Worker(url);
  }
}


/***/ })
/******/ ]);
});
//# sourceMappingURL=BarcodeDetector.js.map